father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])
mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])
Child <- mating(Mothers[mother,], Fathers[father,])
cGenotype <- paste(Child[1], Child[2], sep="")
Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1
All_Children[child,] <- Child
}
for (allele in Alleles) {
n_children <- length(which(All_Children == allele))
Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)
}
output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)
return(output)
}
W <- c(0.25, 1, 1, 0.25)
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), C("A", "a"))
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), mother=c("A", "a"), father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(mother, father, mother, father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Frequencies) <- Alleles#
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(mother, father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Frequencies) <- Alleles#
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(mother, father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Frequencies) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(mother, father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Genotypes) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(mother, father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Genotypes) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(Mother, Father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {
Total <- sum(counts)
AA <- w[4] * (counts[4] / Total)
Aa <- (w[2] * (counts[2] / Total) ) + (w[3] / Total) )
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total)) + (w[3] / Total))
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) + (w[3] / Total)
Aa <- (w[2] * (counts[2] / Total) + (w[3] / Total)
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3]) / Total))
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3]) / Total ) )
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3] / Total ) )
aa <- w[1] * (counts [1] / Total)
meanW <- AA + Aa + aa
return(as.numeric(meanW))
}
Wvec_sin <- c()
for (i in 1:nrow(Population)) {
counts <- Population[i, 3:ncol(Population)]
meanFit <- sim_meanFitness(counts, w=W)
Wvec_sim[i] <- meanfit
}
for (i in 1:nrow(Population)) {#
	counts <- Population[i, 3:ncol(Population)]#
	meanFit <- sim_meanFitness(counts, w=W)#
	Wvec_sim[i] <- meanFit#
}
Wvec_sim <- c()#
for (i in 1:nrow(Population)) {#
	counts <- Population[i, 3:ncol(Population)]#
	meanFit <- sim_meanFitness(counts, w=W)#
	Wvec_sim[i] <- meanFit#
}
plot(Wvec_sim[i], xlab="Generations", ylab="Fitness", type="l", pch=13, col="blue")
plot(Wvec_sim[i], xlab="Generations", ylab="Fitness", type="l", pch=13, col="blue", main="Average Fitness")
calc_meanFitness <- function(p, w=c(0.25, 1, 1, 0.25)) {
AA <- w[4] * p^2
Aa <- 2 * w[2] * p * (1-p)
aa <- w[1] * (1-p)^2
meanW <- AA + Aa + aa
return(meanW)
}
p_seq <- seq(from=0, to=1, by=0.01)
Wvec_calc <- c()
for (i in 1:length(p_seq)) {
Wvec_calc [i] <- calc_meanFitness(p_seq [i], W)
}
x <- optimize(f=calc_meanFitness, lower=0, upper=1, ,maximum=TRUE)
x
par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2, 0.5, 0), tck=-0.01)
plot(Population[,1], Wvec_sim, xlim=c(0,1), ylim=c(0,1), type="b", pch=16, cex=1.25, xlab="frequency of allele A", ylab="mean fitness of whole population")
lines(p_seq, Wvec_calc, col="red", lwd=2)
points(x$maximum, x$objective, pch=21, bg="red", cex=2)
points(mean(Population[,1]), mean(Wvec_sim), pch=8, col="white", cex=1.5)
plotFitness <- function(simulatedPopulation, W) {
p_seq <- seq(from=0, to=1, by=0.01)
Wvec_calc <- c()
for (i in 1:length(p_seq)) {
Wvec_calc[i] <- calc_meanFitness(p_seq[i], W)
}
Wvec_sim <- c()
for(i in 1:nrow(simulatedPopulation)) {
counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]
meanFit <- sim_meanFitness(counts, w=W)
Wvec_sim[i] <- meanFit
}
par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)
plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")
lines(p_seq, Wvec_calc, col="red", lwd=2)
points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)
}
W <- c(1, 1, 1, 0.55)
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.01, 0.99)
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)
plotFitness <- function(simulatedPopulation, W) { #
	p_seq <- seq(from=0, to=1, by=0.01)#
	Wvec_calc <- c()#
	for (i in 1:length(p_seq)) {#
		Wvec_calc[i] <- calc_meanFitness(p_seq[i], W)#
	}#
	Wvec_sim <- c()#
	for(i in 1:nrow(simulatedPopulation)) {#
		counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]#
		meanFit <- sim_meanFitness(counts, w=W)#
		Wvec_sim[i] <- meanFit #
	}#
	par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)#
	plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")#
	lines(p_seq, Wvec_calc, col="red", lwd=2)#
	points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)#
}#
W <- c(1, 1, 1, 0.55)#
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)
plotFitness(Population, W)
W <- c(0.55, 1, 1, 1)
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)
plotFitness(Population, W)
par(mfcol=c(2, 8))
W <- c(1, 0.2, 0.2, 1)
Genotype_Frequencies <- c(0.5, 0, 0, 0.5)
for (i in 1:8) {
Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), C("A", "a"), Freqs=Genotype_Frequencies)
plotFitness(Population, W)
plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)
}
for(i in 1:nrow(simulatedPopulation)) {#
		counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]#
		meanFit <- sim_meanFitness(counts, w=W)#
		Wvec_sim[i] <- meanFit #
	}#
	par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)#
	plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")#
	lines(p_seq, Wvec_calc, col="red", lwd=2)#
	points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)#
}#
W <- c(1, 1, 1, 0.55)#
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
#
W <- c(0.55, 1, 1, 1) #
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
par(mfcol=c(2, 8))#
W <- c(1, 0.2, 0.2, 1)#
Genotype_Frequencies <- c(0.5, 0, 0, 0.5)#
for (i in 1:8) {#
	Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)#
}
for (i in 1:8) {#
	Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)#
}
plot
par(mfcol=c(2, 8))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Genotypes) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(Mother, Father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))#
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3] / Total ) )#
	aa <- w[1] * (counts [1] / Total) #
	meanW <- AA + Aa + aa#
	return(as.numeric(meanW))#
}#
Wvec_sim <- c()#
for (i in 1:nrow(Population)) {#
	counts <- Population[i, 3:ncol(Population)]#
	meanFit <- sim_meanFitness(counts, w=W)#
	Wvec_sim[i] <- meanFit#
} #
plot(Wvec_sim[i], xlab="Generations", ylab="Fitness", type="l", pch=13, col="blue", main="Average Fitness", )#
#
calc_meanFitness <- function(p, w=c(0.25, 1, 1, 0.25)) {#
	AA <- w[4] * p^2#
	Aa <- 2 * w[2] * p * (1-p) #
	aa <- w[1] * (1-p)^2 #
	meanW <- AA + Aa + aa#
	return(meanW)#
}#
p_seq <- seq(from=0, to=1, by=0.01)#
Wvec_calc <- c()#
for (i in 1:length(p_seq)) {#
	Wvec_calc [i] <- calc_meanFitness(p_seq [i], W)#
}#
x <- optimize(f=calc_meanFitness, lower=0, upper=1, ,maximum=TRUE)#
x#
par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(Population[,1], Wvec_sim, xlim=c(0,1), ylim=c(0,1), type="b", pch=16, cex=1.25, xlab="frequency of allele A", ylab="mean fitness of whole population")#
lines(p_seq, Wvec_calc, col="red", lwd=2)#
points(x$maximum, x$objective, pch=21, bg="red", cex=2)#
points(mean(Population[,1]), mean(Wvec_sim), pch=8, col="white", cex=1.5)#
plotFitness <- function(simulatedPopulation, W) { #
	p_seq <- seq(from=0, to=1, by=0.01)#
	Wvec_calc <- c()#
	for (i in 1:length(p_seq)) {#
		Wvec_calc[i] <- calc_meanFitness(p_seq[i], W)#
	}#
	Wvec_sim <- c()#
	for(i in 1:nrow(simulatedPopulation)) {#
		counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]#
		meanFit <- sim_meanFitness(counts, w=W)#
		Wvec_sim[i] <- meanFit #
	}#
	par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)#
	plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")#
	lines(p_seq, Wvec_calc, col="red", lwd=2)#
	points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)#
}#
W <- c(1, 1, 1, 0.55)#
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
#
W <- c(0.55, 1, 1, 1) #
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
par(mfcol=c(2, 8))#
W <- c(1, 0.2, 0.2, 1)#
Genotype_Frequencies <- c(0.5, 0, 0, 0.5)#
for (i in 1:8) {#
	Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)#
}#
#
par(mfcol=c(2, 8))#
W <- c(1, 0.25, 0.25, 1)#
Genotype_Frequencies <- c(0.1, 0, 0, 0.9)#
for (i in 1:8) {#
	Population <- simPop_w(Popsize=100, nGeneration=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type"l", xlab="time (in generation)", ylab="frequency of A", ylim=c(0, 1), lwd=4)#
}
install.package(learnPopGen)
learnPopGen
library(learnPopGen)
install.packages("learnPopGen")
help(learnPopGen)
library(learnPopGen)
help(learnPopGen)
??learnPopGen
install.pacakges("learnPopGen")
install.packages("learnPopGen")
library(learnPopGen)
?coalescent
?coalescent.plot()
coalescent.plot(n=20, ngen=30, col.order="alternating")
coalescent.plot(n=10, ngen=20, colors=NULL, ...)
coalescent.plot(n=10, ngen=20, colors=NULL)
coalescent.plot(n=100, ngen=100, colors=NULL)
coalescent.plot(n=50, ngen=50, colors=NULL)
coalescent.plot(n=50, ngen=60, colors=NULL)
coalescent.plot(n=100, ngen=100, colors=NULL)
coalescent.plot(n=20, ngen=30, col.order="alternating")
coalescent.plot(n=2, ngen=4, colors=NULL)
coalescent.plot(n=1, ngen=1, colors=NULL)
coalescent.plot(n=2, ngen=3, colors=NULL)
coalescent.plot(n=1, ngen=3, colors=NULL)
coalescent.plot(n=1, ngen=1, colors=NULL)
coalescent.plot(n=20, ngen30, colors=NULL)
coalescent.plot(n=20, ngen=30, colors=NULL)
coalescent.plot(n=100, ngen=100, colors=NULL)
library("phytools")
list("tree")
vector("births")
vec <- vector("births")
vector?
?vector
is_empty("births")
is_empty(births)
is_empty <- ("births")
is_empty <- ("Fractions")
for(i in 1:100)
source("http://jonsmitchell.com/code/plotFxn02b.R")
install.packages("paleobioDB", dep=T)
setwd(~/Desktop/Evolution/Tasks/Task_03)
setwd("~/Desktop/Evolution/Tasks/Task_03")
library(paleobioDB)
Taxon <- Dinosauria
Taxon <- "Dinosauria"
MinMia <- 66
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurences(base_name = Taxon, show = c("phylo" , "coords" , "ident"), min_ma=MinMA, max_ma=MaxMA)
fossils <- pbdb_occurences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA,MinMA), res=Res)
par(mar=c(4, 5, 2, 1), las=1, tck=-0.01, mgp=c(2.5, 0.5, 0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[2,], xlim=c(MaxMA, MinMA), type="1", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
install.packages("paleobioDB", dep=T)#
setwd("~/Desktop/Evolution/Tasks/Task_03")#
library(paleobioDB)
setwd("~/Desktop/Evolution/Tasks/Task_03")
library(paleobioDB)
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
Res <- 5
install.packages("paleobioDB", dep=T)
setwd("~/Desktop/Evolution/Tasks/Task_03")
library(paleobioDB)
Taxon <- "Dinosauria"
MinMA <- 66#
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA,MinMA), res=Res)
par(mar=c(4, 5, 2, 1), las=1, tck=-0.01, mgp=c(2.5, 0.5, 0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(MinMA, MaxMA))
par(mar=c(4, 5, 2, 1), las=1, tck=-0.01, mgp=c(2.5, 0.5, 0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,1], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,2], col="red")
legend("topleft", legend=c("first appear", "go extinct"), col=c("black", "red"), lty=1, bty="n")
OceanCol <- "light blue"
LandCol <- "black"
Cols <- c('#fee5d9', '#fca91', '#fb6a4a', '#de2d26', 'a50f15')
par(las=0)
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int=LandCol, col.rich=Cols)
Cols <- c('#fee5d9', '#fcae91', '#fb6a4a', '#de2d26', '#a50f15')
par(las=0)
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int=LandCol, col.rich=Cols)
MinMA <- 201#
MaxMA <- 252
triassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA <- 145#
MaxMA <- 201#
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA <- 66#
MaxMA <- 145#
cretaceous_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(triassic_fossils, col.ocean=OceanCol, col.int=LandCol, col.rich=Cols)
mtext(side=3, "Triassic (252-201Ma)", cex=3, line=-2)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(jurassic_fossils, col.ocean=OceanCol, col.int=LandCol, col.rich=Cols)
mtext(side=3, "Jurassic (201-145Ma)", cex=3, line=-2)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(cretaceous_fossils, col.ocean=OceanCol, col.int=LandCol, col.rich=Cols)
mtext(side=3, "Cretaceous (145-66Ma)", cex=3, line=-2)
Taxon2 <- "Mammals"
MinMA <- 66#
MaxMA <- 252
fossils2 <- pbdb_occurrences(base_name = Taxon2, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon2 <- "Mammalia"#
MinMA <- 66#
MaxMA <- 252
fossils2 <- pbdb_occurrences(base_name = Taxon2, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
nspeciesOverTime2 <- pbdb_richness(fossils2, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
par(mar=c(4, 5, 2, 1), las=1, tck=-0.01, mgp=c(2.5, 0.5, 0))
Col_dino <- Cols[length(Cols)]
Col_mammal <- Cols[1]
LineWidth <- 2
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesoverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_dino, lwd=LineWidth)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_dino, lwd=LineWidth)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime2)), nspeciesOverTime2[,2], col=Col_mammal, lwd=LineWidth)
legend("topleft", legend=c(Taxon, Taxon2), col=c(Col_dino, Col_mammal), bty="n", lwd=LineWidth)
Taxon3 <- "Bivalves"
MinMA <- 5
Max <- 65
fossils3 <- pbdb_occurrences(base_name = Taxon3, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon3 <- "Bivalves"
MinMA <- 500#
Max <- 540
fossils3 <- pbdb_occurrences(base_name = Taxon3, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon3 <- "Bivalvia"
MinMA <- 500#
Max <- 540
fossils3 <- pbdb_occurrences(base_name = Taxon3, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon <- "Bivalvia"
Taxon3 <- "Bivalvia"#
MinMA <- 500#
MaxMA <- 540
fossils <- pbdb_occurrences(base_name = Taxon3, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
nspeciesOverTime3 <- pbdb_richness(fossils3, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
Taxon3 <- "Bivalvia"#
MinMA <- 500#
MaxMA <- 540#
fossils3 <- pbdb_occurrences(base_name = Taxon3, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)#
nspeciesOverTime3 <- pbdb_richness(fossils3, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
Taxon4 <- "Echinodermata"#
MinMA <- 500#
MaxMA <- 540#
fossils4 <- pbdb_occurrences(base_name = Taxon4, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)#
nspeciesOverTime4 <- pbdb_richness(fossils4, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
par(mar=c(4, 5, 2, 1), las=1, tck=-0.01, mgp=c(2.5, 0.5, 0))
Col_bivalve <- Cols[length(Cols)]
Col_echinoderm <- Cols[1]
LineWidth <- 2
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime3)), nspeciesOverTime3[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_bivalve, lwd=LineWidth)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime4)), nspeciesOverTime4[,2], col=Col_echinoderm, lwd=LineWidth)
legend("topleft", legend=c(Taxon3, Taxon4), col=c(Col_bivalve, Col_echinoderm), bty="n", lwd=LineWidth)
install.packages("paleobioDB", dep=T)
library(paleobioDB)
Taxon <- Testudinidae
Taxon <- Testudines
Taxon <- Gopherus
source("https://www-ncbi-nlm-nih-gov.www.libproxy.wvu.edu/pmc/articles/PMC4482574/")
source("http:www-ncbi-nim-nih-gov.www.libproxy.wvu.edu/pmc/articles/PMC4482574/")
