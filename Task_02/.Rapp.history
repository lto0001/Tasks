mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Frequencies) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(mother, father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Genotypes) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(mother, father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Genotypes) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(Mother, Father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {
Total <- sum(counts)
AA <- w[4] * (counts[4] / Total)
Aa <- (w[2] * (counts[2] / Total) ) + (w[3] / Total) )
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total)) + (w[3] / Total))
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) + (w[3] / Total)
Aa <- (w[2] * (counts[2] / Total) + (w[3] / Total)
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3]) / Total))
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3]) / Total ) )
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3] / Total ) )
aa <- w[1] * (counts [1] / Total)
meanW <- AA + Aa + aa
return(as.numeric(meanW))
}
Wvec_sin <- c()
for (i in 1:nrow(Population)) {
counts <- Population[i, 3:ncol(Population)]
meanFit <- sim_meanFitness(counts, w=W)
Wvec_sim[i] <- meanfit
}
for (i in 1:nrow(Population)) {#
	counts <- Population[i, 3:ncol(Population)]#
	meanFit <- sim_meanFitness(counts, w=W)#
	Wvec_sim[i] <- meanFit#
}
Wvec_sim <- c()#
for (i in 1:nrow(Population)) {#
	counts <- Population[i, 3:ncol(Population)]#
	meanFit <- sim_meanFitness(counts, w=W)#
	Wvec_sim[i] <- meanFit#
}
plot(Wvec_sim[i], xlab="Generations", ylab="Fitness", type="l", pch=13, col="blue")
plot(Wvec_sim[i], xlab="Generations", ylab="Fitness", type="l", pch=13, col="blue", main="Average Fitness")
calc_meanFitness <- function(p, w=c(0.25, 1, 1, 0.25)) {
AA <- w[4] * p^2
Aa <- 2 * w[2] * p * (1-p)
aa <- w[1] * (1-p)^2
meanW <- AA + Aa + aa
return(meanW)
}
p_seq <- seq(from=0, to=1, by=0.01)
Wvec_calc <- c()
for (i in 1:length(p_seq)) {
Wvec_calc [i] <- calc_meanFitness(p_seq [i], W)
}
x <- optimize(f=calc_meanFitness, lower=0, upper=1, ,maximum=TRUE)
x
par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2, 0.5, 0), tck=-0.01)
plot(Population[,1], Wvec_sim, xlim=c(0,1), ylim=c(0,1), type="b", pch=16, cex=1.25, xlab="frequency of allele A", ylab="mean fitness of whole population")
lines(p_seq, Wvec_calc, col="red", lwd=2)
points(x$maximum, x$objective, pch=21, bg="red", cex=2)
points(mean(Population[,1]), mean(Wvec_sim), pch=8, col="white", cex=1.5)
plotFitness <- function(simulatedPopulation, W) {
p_seq <- seq(from=0, to=1, by=0.01)
Wvec_calc <- c()
for (i in 1:length(p_seq)) {
Wvec_calc[i] <- calc_meanFitness(p_seq[i], W)
}
Wvec_sim <- c()
for(i in 1:nrow(simulatedPopulation)) {
counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]
meanFit <- sim_meanFitness(counts, w=W)
Wvec_sim[i] <- meanFit
}
par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)
plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")
lines(p_seq, Wvec_calc, col="red", lwd=2)
points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)
}
W <- c(1, 1, 1, 0.55)
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.01, 0.99)
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)
plotFitness <- function(simulatedPopulation, W) { #
	p_seq <- seq(from=0, to=1, by=0.01)#
	Wvec_calc <- c()#
	for (i in 1:length(p_seq)) {#
		Wvec_calc[i] <- calc_meanFitness(p_seq[i], W)#
	}#
	Wvec_sim <- c()#
	for(i in 1:nrow(simulatedPopulation)) {#
		counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]#
		meanFit <- sim_meanFitness(counts, w=W)#
		Wvec_sim[i] <- meanFit #
	}#
	par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)#
	plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")#
	lines(p_seq, Wvec_calc, col="red", lwd=2)#
	points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)#
}#
W <- c(1, 1, 1, 0.55)#
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)
plotFitness(Population, W)
W <- c(0.55, 1, 1, 1)
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)
plotFitness(Population, W)
par(mfcol=c(2, 8))
W <- c(1, 0.2, 0.2, 1)
Genotype_Frequencies <- c(0.5, 0, 0, 0.5)
for (i in 1:8) {
Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), C("A", "a"), Freqs=Genotype_Frequencies)
plotFitness(Population, W)
plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)
}
for(i in 1:nrow(simulatedPopulation)) {#
		counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]#
		meanFit <- sim_meanFitness(counts, w=W)#
		Wvec_sim[i] <- meanFit #
	}#
	par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)#
	plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")#
	lines(p_seq, Wvec_calc, col="red", lwd=2)#
	points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)#
}#
W <- c(1, 1, 1, 0.55)#
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
#
W <- c(0.55, 1, 1, 1) #
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
par(mfcol=c(2, 8))#
W <- c(1, 0.2, 0.2, 1)#
Genotype_Frequencies <- c(0.5, 0, 0, 0.5)#
for (i in 1:8) {#
	Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)#
}
for (i in 1:8) {#
	Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)#
}
plot
par(mfcol=c(2, 8))
mating <- function(mother, father) { #
	Offspring <- c(sample(mother, size = 1), sample (father, size = 1))#
	Offspring <- sort(Offspring, decreasing=F)#
	return(Offspring)#
}#
makePop <- function(Popsize, Alleles=c("A", "a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Genos <- combn(c(Alleles, Alleles), 2)#
	Genos <- sort(unique(apply(Genos, 2, paste, collapse="")), decreasing=F)#
	Pop <- sample(Genos, size=Popsize, replace=T, prob=Freqs)#
	Pop <- matrix(unlist(sapply(Pop, strsplit,"")), ncol=2)#
	return(Pop)#
}#
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 1, 0), Mother=c("A", "a"), Father=c("A","a"), Freqs=c(0.9, 0.05, 0, 0.05)) {#
	Combinations <- combn(c(Mother, Father, Mother, Father), 2)#
	Genos <- sort(unique(apply(Combinations, 2, paste, collapse="")), decreasing=F)#
	Genotypes <- matrix(0, nrow=nGenerations, ncol=length(Genos))#
	colnames(Genotypes) <- Genos#
	Alleles <- unique(as.vector(Combinations))#
	Frequencies <- matrix(0, nrow=nGenerations, ncol=length(Alleles))#
	colnames(Frequencies) <- Alleles #
	names(w) <- colnames(Genotypes)#
	checkFitness <- function(Geno, w) {#
		Genot <- paste(Geno[1], Geno[2], sep="")#
		Fit <- w[Genot]#
		return(Fit)#
	}#
	All_Children <- makePop(Popsize, unique(c(Mother, Father)), Freqs=Freqs)#
	for (generation in 1:nGenerations) { #
		#what is their fitnesses? #
		Fitnesses <- apply(All_Children, 1, checkFitness, w=w)#
		Women <- sample(1:Popsize, size=(Popsize /2))#
		Mothers <- All_Children[Women,]#
		Men <- setdiff(1:Popsize, Women)#
		Fathers <- All_Children[Men,]#
		nChildren <- Popsize#
		for (child in 1:nChildren) {#
			father <- sample(1:nrow(Fathers), size=1, prob=Fitnesses[Men])#
			mother <- sample(1:nrow(Mothers), size=1, prob=Fitnesses[Women])#
			Child <- mating(Mothers[mother,], Fathers[father,])#
			cGenotype <- paste(Child[1], Child[2], sep="")#
			Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype] +1 #
			All_Children[child,] <- Child#
		}#
		for (allele in Alleles) {#
			n_children <- length(which(All_Children == allele))#
			Frequencies[generation, which(Alleles == allele)] <- n_children / length(All_Children)#
		}#
	}#
	output <- data.frame(Frequencies=Frequencies, Genotypes=Genotypes)#
	return(output)#
}#
W <- c(0.25, 1, 1, 0.25)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"))#
sim_meanFitness <- function(counts, w=c(0.25, 1, 1, 0.25)) {#
	Total <- sum(counts)#
	AA <- w[4] * (counts[4] / Total)#
	Aa <- (w[2] * (counts[2] / Total) ) + (w[3] * (counts[3] / Total ) )#
	aa <- w[1] * (counts [1] / Total) #
	meanW <- AA + Aa + aa#
	return(as.numeric(meanW))#
}#
Wvec_sim <- c()#
for (i in 1:nrow(Population)) {#
	counts <- Population[i, 3:ncol(Population)]#
	meanFit <- sim_meanFitness(counts, w=W)#
	Wvec_sim[i] <- meanFit#
} #
plot(Wvec_sim[i], xlab="Generations", ylab="Fitness", type="l", pch=13, col="blue", main="Average Fitness", )#
#
calc_meanFitness <- function(p, w=c(0.25, 1, 1, 0.25)) {#
	AA <- w[4] * p^2#
	Aa <- 2 * w[2] * p * (1-p) #
	aa <- w[1] * (1-p)^2 #
	meanW <- AA + Aa + aa#
	return(meanW)#
}#
p_seq <- seq(from=0, to=1, by=0.01)#
Wvec_calc <- c()#
for (i in 1:length(p_seq)) {#
	Wvec_calc [i] <- calc_meanFitness(p_seq [i], W)#
}#
x <- optimize(f=calc_meanFitness, lower=0, upper=1, ,maximum=TRUE)#
x#
par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(Population[,1], Wvec_sim, xlim=c(0,1), ylim=c(0,1), type="b", pch=16, cex=1.25, xlab="frequency of allele A", ylab="mean fitness of whole population")#
lines(p_seq, Wvec_calc, col="red", lwd=2)#
points(x$maximum, x$objective, pch=21, bg="red", cex=2)#
points(mean(Population[,1]), mean(Wvec_sim), pch=8, col="white", cex=1.5)#
plotFitness <- function(simulatedPopulation, W) { #
	p_seq <- seq(from=0, to=1, by=0.01)#
	Wvec_calc <- c()#
	for (i in 1:length(p_seq)) {#
		Wvec_calc[i] <- calc_meanFitness(p_seq[i], W)#
	}#
	Wvec_sim <- c()#
	for(i in 1:nrow(simulatedPopulation)) {#
		counts <- simulatedPopulation[i, 3:ncol(simulatedPopulation)]#
		meanFit <- sim_meanFitness(counts, w=W)#
		Wvec_sim[i] <- meanFit #
	}#
	par(las=1, mar=c(4, 5, 0.5, 0.5), mgp=c(2.25, 0.4, 0), tck=-0.01)#
	plot(1, 1, xlim=c(0, 1), ylim=c(0, 1), type="n", xlab="frequency of allele A", ylab="mean fitness of whole population")#
	lines(p_seq, Wvec_calc, col="red", lwd=2)#
	points(Population[,1], Wvec_sim, pch=16, col=rgb(0, 0, 0, 0.33), type="b", cex=1.25)#
}#
W <- c(1, 1, 1, 0.55)#
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
#
W <- c(0.55, 1, 1, 1) #
Genotype_Frequencies <- c(0, 0.01, 0.01, 0.99)#
Population <- simPop_w(Popsize=500, nGenerations=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
plotFitness(Population, W)#
par(mfcol=c(2, 8))#
W <- c(1, 0.2, 0.2, 1)#
Genotype_Frequencies <- c(0.5, 0, 0, 0.5)#
for (i in 1:8) {#
	Population <- simPop_w(Popsize=500, nGenerations=500, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type="l", xlab="time (in generations)", ylab="freqency of A", ylim=c(0, 1), lwd=4)#
}#
#
par(mfcol=c(2, 8))#
W <- c(1, 0.25, 0.25, 1)#
Genotype_Frequencies <- c(0.1, 0, 0, 0.9)#
for (i in 1:8) {#
	Population <- simPop_w(Popsize=100, nGeneration=100, w=W, c("A", "a"), c("A", "a"), Freqs=Genotype_Frequencies)#
	plotFitness(Population, W)#
	plot(Population[,1], type"l", xlab="time (in generation)", ylab="frequency of A", ylim=c(0, 1), lwd=4)#
}
install.package(learnPopGen)
learnPopGen
library(learnPopGen)
install.packages("learnPopGen")
help(learnPopGen)
library(learnPopGen)
help(learnPopGen)
??learnPopGen
install.pacakges("learnPopGen")
install.packages("learnPopGen")
library(learnPopGen)
?coalescent
?coalescent.plot()
coalescent.plot(n=20, ngen=30, col.order="alternating")
coalescent.plot(n=10, ngen=20, colors=NULL, ...)
coalescent.plot(n=10, ngen=20, colors=NULL)
coalescent.plot(n=100, ngen=100, colors=NULL)
coalescent.plot(n=50, ngen=50, colors=NULL)
coalescent.plot(n=50, ngen=60, colors=NULL)
coalescent.plot(n=100, ngen=100, colors=NULL)
coalescent.plot(n=20, ngen=30, col.order="alternating")
coalescent.plot(n=2, ngen=4, colors=NULL)
coalescent.plot(n=1, ngen=1, colors=NULL)
coalescent.plot(n=2, ngen=3, colors=NULL)
coalescent.plot(n=1, ngen=3, colors=NULL)
coalescent.plot(n=1, ngen=1, colors=NULL)
coalescent.plot(n=20, ngen30, colors=NULL)
coalescent.plot(n=20, ngen=30, colors=NULL)
coalescent.plot(n=100, ngen=100, colors=NULL)
library("phytools")
list("tree")
vector("births")
vec <- vector("births")
vector?
?vector
is_empty("births")
is_empty(births)
is_empty <- ("births")
is_empty <- ("Fractions")
for(i in 1:100)
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
write.csv(Data, "rawdata.csv", quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feed], beren3$age[Feed], mean)
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
write.csv(Data, "rawdata.csv", quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
avgMilk <- mean(beren3$value[Feeds])#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
Feeds
beren3[Feeds,]
cor(beren3$value[Feeds], beren3$age[Feeds])
beren3$age
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
write.csv(Data, "rawdata.csv", quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
avgMilk <- mean(beren3$value[Feeds])#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
dev.off()
Days <- unique(beren3$age[Feeds])#
ndays <- length(Days)#
#
# create a set of custom colors#
Alpha <- 0.75#
divCols <- c(rgb(158/255,1/255,66/255, Alpha),rgb(213/255,62/255,79/255, Alpha),rgb(244/255,109/255,67/255, Alpha),rgb(253/255,174/255,97/255, Alpha),rgb(254/255,224/255,139/255, Alpha),rgb(255/255,255/255,191/255, Alpha),rgb(230/255,245/255,152/255, Alpha),rgb(171/255,221/255,164/255, Alpha),rgb(102/255,194/255,165/255, Alpha),rgb(50/255,136/255,189/255, Alpha),rgb(94/255,79/255,162/255, Alpha))#
Pal <- colorRampPalette(divCols, interpolate = "spline", alpha = T)#
#
# subset the custom colors#
Cols <- Pal(ndays)#
names(Cols) <- Days#
#
# make a blank plot#
plot(1, 1, xlim=c(7, 16), ylim=c(0, 20), type="n", xlab="time of day", ylab="total milk (oz)")#
#
# add data to the plot#
for (Day in Days)	{#
	FeedsOnDay <- which(beren3$age[Feeds] == Day)#
	Times <- beren3$start_hour[Feeds[FeedsOnDay]] + (beren3$start_minute[Feeds[FeedsOnDay]] / 60)#
	Amounts <- cumsum(beren3$value[Feeds[FeedsOnDay]])#
	points(Times, Amounts, col=Cols[as.character(Day)], type="b", pch=16)#
}#
#
# add a legend to the plot#
dayVec <- c(min(Days), Days[floor(0.25*ndays)], median(Days), Days[ceiling(0.75*ndays)], max(Days))#
legend("top", legend=dayVec, pch=21, pt.bg=Cols[as.character(dayVec)], horiz = T, bty = "n", pt.cex=2, title = "age in days")
source("http://jonsmitchell.com/code/plotFxn02b.R")
Days <- unique(beren3$age[Feeds])#
ndays <- length(Days)#
#
# create a set of custom colors#
Alpha <- 0.75#
divCols <- c(rgb(158/255,1/255,66/255, Alpha),rgb(213/255,62/255,79/255, Alpha),rgb(244/255,109/255,67/255, Alpha),rgb(253/255,174/255,97/255, Alpha),rgb(254/255,224/255,139/255, Alpha),rgb(255/255,255/255,191/255, Alpha),rgb(230/255,245/255,152/255, Alpha),rgb(171/255,221/255,164/255, Alpha),rgb(102/255,194/255,165/255, Alpha),rgb(50/255,136/255,189/255, Alpha),rgb(94/255,79/255,162/255, Alpha))#
Pal <- colorRampPalette(divCols, interpolate = "spline", alpha = T)#
#
# subset the custom colors#
Cols <- Pal(ndays)#
names(Cols) <- Days#
#
# make a blank plot#
plot(1, 1, xlim=c(7, 16), ylim=c(0, 20), type="n", xlab="time of day", ylab="total milk (oz)")#
#
# add data to the plot#
for (Day in Days)	{#
	FeedsOnDay <- which(beren3$age[Feeds] == Day)#
	Times <- beren3$start_hour[Feeds[FeedsOnDay]] + (beren3$start_minute[Feeds[FeedsOnDay]] / 60)#
	Amounts <- cumsum(beren3$value[Feeds[FeedsOnDay]])#
	points(Times, Amounts, col=Cols[as.character(Day)], type="b", pch=16)#
}#
#
# add a legend to the plot#
dayVec <- c(min(Days), Days[floor(0.25*ndays)], median(Days), Days[ceiling(0.75*ndays)], max(Days))#
legend("top", legend=dayVec, pch=21, pt.bg=Cols[as.character(dayVec)], horiz = T, bty = "n", pt.cex=2, title = "age in days")
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
write.csv(Data, "rawdata.csv", quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
setwd()
setwd("read")
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
write.csv(Data, "rawdata.csv", quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
avgMilk <- mean(beren3$value[Feeds])#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
dev.off()
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col="red")
dev.off()
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col="red")
beren3 <- read.csv("beren_new.csv", stringsAsFactors = F)#
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col="red")
head(beren3)
head(beren3[Feeds,])
unique(beren3$event)
source("http://jonsmitchell.com/code/plotFxn02b.R")
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
write.csv(Data, "rawdata.csv", quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)#
#
# Setting up for Task 02b#
setwd()#
beren3 <- read.csv("beren_new.csv", stringsAsFactors = F)#
Feeds <- which(beren3$event == "bottle")#
#
# Getting summaries of beren3 data#
avgMilk <- mean(beren3$value[Feeds])#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
#
# Finding correlations#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")#
#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col="red")#
#
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col="red")#
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
write.csv(Data, "rawdata.csv", quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
setwd()#
beren3 <- read.csv("beren_new.csv", stringsAsFactors = F)#
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col="red")
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col="red")#
dev.off()
unique(beren3$event)
setwd(~/Desktop/Evolution/Tasks/Task_02)
setwd("~/Desktop/Evolution/Tasks/Task_02")
beren3 <- read.csv("beren_new.csv", stringsAsFactors = F)
which(ints = Skill)
which(beren3$event == Skill)
Skill <- which(beren3$event == "skill_crawl_full")
beren3[Skill, "age"]
beren3[Skill]
beren3[Skill,]
berenYounger <- beren3[which(beren3$age < Age),]#
berenOlder <- beren3[which(beren3$age > Age),]
Age <- beren3[Skill, "age"]#
#
berenYounger <- beren3[which(beren3$age < Age),]#
berenOlder <- beren3[which(beren3$age > Age),]
head(berenYounger)
tail(berenYounger)
tail(berenOlder)
nrow(berenOlder)
nrow(berenYounger)
berenYounger <- beren3[which(beren3$age < Age),]
berenOlder <- beren3[which(beren3$age > Age),]
Feeds <- beren3[which(berenYounger$event == "bottle")]
Feeds <- which(berenYounger$event == "bottle")
youngerOverallAvgMilk <- mean(berenYounger$value["Feeds"])
youngerPerDayAvgMilk <- tapply(berenYounger$value[Feeds], berenYounger$age[Feeds], mean)
beforeAvgMilk <- mean(youngerPerDayAvgMilk$value[Feeds])
beforeAvgMilk <- mean(youngerPerDayAvgMilk$value["Feeds"])
beforeAvgMilk <- mean(youngerPerDayAvgMilk)
# Read in data & set up working directory#
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors = F)
# Find which row he learned to crawl#
Skill <- which(beren3$event == "skill_crawl_full")#
#
# Find day he learned to crawl#
Age <- beren3[Skill, "age"]
# Subset data by older and younger than day he learned to crawl#
berenYounger <- beren3[which(beren3$age < Age),]#
berenOlder <- beren3[which(beren3$age > Age),]
# Subset berenYounger to be only bottle feeds#
Feeds <- which(berenYounger$event == "bottle")#
#
# Use mean() on value column to get overall avg milk for subset younger#
youngerOverallAvgMilk <- mean(berenYounger$value["Feeds"])
youngerOverallAvgMilk
berenYounger$value
berenYounger$value[Feeds]
berenYounger[Feeds,]
berenYounger$value[Feeds]
mean(berenYounger$value[Feeds])
# Use mean() on value column to get overall avg milk for subset younger#
youngerOverallAvgMilk <- mean(berenYounger$value["Feeds"])
youngerOverallAvgMilk
# Use mean() on value column to get overall avg milk for subset younger#
youngerOverallAvgMilk <- mean(berenYounger$value[Feeds])
youngerOverallAvgMilk
# Use tapply() on value & age to get per-day avg milk for younger#
youngerPerDayAvgMilk <- tapply(berenYounger$value[Feeds], berenYounger$age[Feeds], mean)
# Use tapply() on value & age to get per-day avg milk for younger#
youngerPerDayAvgMilk <- tapply(berenYounger$value[Feeds], berenYounger$age[Feeds], mean)
youngerPerDayAvgMilk
# Use mean() on youngerPerDayAvgMilk to get avg milk before crawl#
beforeAvgMilk <- mean(youngerPerDayAvgMilk)
### Repeat above 4 steps for older#
Feeds <- which(berenOlder$event == "bottle")#
olderOverallAvgMilk <- mean(berenOlder$value["Feeds"])#
olderPerDayAvgMilk <- tapply(berenOlder$value[Feeds], berenYounger$age[Feeds], mean)
boxplot(youngerPerDayAvgMilk, olderPerDayAvgMilk)
Skill <- grep("high", beren3$event)
Skill
# Find day he learned to crawl#
Age <- beren3[Skill, "age"]#
#
# Subset data by older and younger than day he learned to crawl#
berenYounger <- beren3[which(beren3$age < Age),]#
berenOlder <- beren3[which(beren3$age > Age),]#
#
# Subset berenYounger to be only bottle feeds#
Feeds <- which(berenYounger$event == "bottle")#
#
# Use mean() on value column to get overall avg milk for subset younger#
youngerOverallAvgMilk <- mean(berenYounger$value[Feeds])#
#
# Use tapply() on value & age to get per-day avg milk for younger#
youngerPerDayAvgMilk <- tapply(berenYounger$value[Feeds], berenYounger$age[Feeds], mean)#
#
# Use mean() on youngerPerDayAvgMilk to get avg milk before crawl#
beforeAvgMilk <- mean(youngerPerDayAvgMilk)#
#
### Repeat above 4 steps for older#
Feeds <- which(berenOlder$event == "bottle")#
olderOverallAvgMilk <- mean(berenOlder$value["Feeds"])#
olderPerDayAvgMilk <- tapply(berenOlder$value[Feeds], berenYounger$age[Feeds], mean)#
#
boxplot(youngerPerDayAvgMilk, olderPerDayAvgMilk)
par(mfrow=c(1,2))#
plot(as.numeric(names(youngerPerDayAvgMilk)), youngerPerDayAvgMilk, type="b")#
plot(as.numeric(names(olderPerDayAvgMilk)), olderPerDayAvgMilk, type="b")
olderPerDayAvgMilk
beren3[which(beren3$age > Age),]
### Repeat above 4 steps for older#
Feeds <- which(berenOlder$event == "bottle")#
olderOverallAvgMilk <- mean(berenOlder$value[Feeds])#
olderPerDayAvgMilk <- tapply(berenOlder$value[Feeds], berenOlder$age[Feeds], mean)#
#
boxplot(youngerPerDayAvgMilk, olderPerDayAvgMilk)#
#
par(mfrow=c(1,2))#
plot(as.numeric(names(youngerPerDayAvgMilk)), youngerPerDayAvgMilk, type="b")#
plot(as.numeric(names(olderPerDayAvgMilk)), olderPerDayAvgMilk, type="b")
